name: Selective Build and Test in Package Dirs

on:
  push:
    branches: [main]
    paths:
      - "packages/**"
      - "package.json"
      - "pnpm-lock.yaml"
      - "pnpm-workspace.yaml"

  pull_request:
    paths:
      - "packages/**"
      - "package.json"
      - "pnpm-lock.yaml"
      - "pnpm-workspace.yaml"
      - "connectors-list.json"
      - ".github/workflows/build.yml"

jobs:
  check-list-updated:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 10
      - name: install dependencies
        run: |
          pnpm install --frozen-lockfile
          pnpm prepare
      - name: check-list-updated
        run: git diff --exit-code

  determine-changed-packages:
    runs-on: ubuntu-latest
    needs: check-list-updated
    outputs:
      changed_packages: ${{ steps.list-packages.outputs.packages }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Get pnpm store directory
        id: pnpmcache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpmcache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Determine Base Ref
        id: vars
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "base_ref=origin/${{ github.base_ref }}" >> $GITHUB_OUTPUT
          else
            echo "base_ref=origin/main^" >> $GITHUB_OUTPUT
          fi
          echo "Determined base ref: $(cat $GITHUB_OUTPUT | grep base_ref)"

      - name: Install Root Dependencies
        run: pnpm install --frozen-lockfile

      - name: List Changed Packages (incl. dependents, excl. specific ones)
        id: list-packages
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          echo "Base ref for diff: ${{ steps.vars.outputs.base_ref }}"
          CHANGED_PACKAGES_JSON=$(pnpm ls -r --depth -1 --json \
            --filter "...[${{ steps.vars.outputs.base_ref }}]" \
            --filter=!./packages/api \
            --filter=!./packages/backend \
            | jq -c 'map(.name) | map(select(. != "@wrtn/connector"))')
          echo "Raw changed packages JSON (names): $CHANGED_PACKAGES_JSON"
          echo "packages=${CHANGED_PACKAGES_JSON}" >> $GITHUB_OUTPUT

  build-and-test-package:
    runs-on: ubuntu-latest
    needs: determine-changed-packages
    if: needs.determine-changed-packages.outputs.changed_packages != '[]'

    name: Test ${{ matrix.package_path }}

    strategy:
      fail-fast: false
      matrix:
        package_path: ${{ fromJson(needs.determine-changed-packages.outputs.changed_packages) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Get pnpm store directory
        id: pnpmcache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpmcache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Build Package & Dependencies
        run: |
          echo "Building package ${{ matrix.package_path }} and its dependencies"
          pnpm --filter "${{ matrix.package_path }}..." run --if-present build

      - name: Test Package
        run: |
          echo "Testing package ${{ matrix.package_path }}"
          pnpm --filter "${{ matrix.package_path }}" run --if-present test
