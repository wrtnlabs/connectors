import typia from "typia";
import { IHancellService } from "@wrtnlabs/connector-hancell/lib/structures/IHancellService";
import { HancellService } from "@wrtnlabs/connector-hancell/lib/hancell/HancellService";
import { v4 } from "uuid";

const exampleFile = `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`;

export const test_hancell_read_file = async () => {
  // const response = await axios.get(input.fileUrl, {
  //   responseType: "arraybuffer",
  // });
  //
  // const file = response.data;

  /**
   * read worksheet list
   */
  const worksheetListInput: IHancellService.IReadHancellInput = {
    fileBase64: exampleFile,
  };

  const hancellService = new HancellService();

  const res = await hancellService.getHancellData(worksheetListInput);

  typia.assert(res);

  return res;
};

export const test_hancell_insert_rows = async () => {
  /**
   * 이전 데이터 조회
   */
  const targetCell = "B3";
  const before = await test_hancell_read_file();
  const beforeData = before["Sheet1"]?.[targetCell];

  /**
   * 특정 셀 수정
   */
  const hancellService = new HancellService();

  const testValue = v4();
  const updated = await hancellService.upsertSheet({
    fileBase64: exampleFile,
    sheetName: "Sheet1",
    cells: {
      [targetCell]: testValue,
    },
  });

  /**
   * 수정 후 조회
   */
  const after = await hancellService.getHancellData({
    fileBase64: updated.fileBase64,
  });

  const afterData = after["Sheet1"]?.[targetCell];

  typia.assert<false>(beforeData === afterData);
  typia.assert<true>(afterData === testValue);
};

export const test_hancell_insert_rows_outside_of_start_point = async () => {
  /**
   * 이전 데이터 조회
   */
  const targetCell = "A1";
  const before = await test_hancell_read_file();
  const beforeData = before["Sheet1"]?.[targetCell]; // 시작 지점 바깥에 존재한다.

  /**
   * 특정 셀 수정
   */
  const hancellService = new HancellService();

  const testValue = v4();
  const updated = await hancellService.upsertSheet({
    fileBase64: exampleFile,
    sheetName: "Sheet1",
    cells: {
      [targetCell]: testValue,
    },
  });

  /**
   * 수정 후 조회
   */
  const after = await hancellService.getHancellData({
    fileBase64: updated.fileBase64,
  });

  const afterData = after["Sheet1"]?.[targetCell];

  typia.assert<false>(beforeData === afterData);
  typia.assert<true>(afterData === testValue);
};

export const test_hancell_insert_rows_outside_of_end_point = async () => {
  /**
   * 이전 데이터 조회
   */
  const targetCell = "Z1";
  const before = await test_hancell_read_file();
  const beforeData = before["Sheet1"]?.[targetCell]; // 시트 범위 종료 지점 바깥에 존재한다.

  /**
   * 특정 셀 수정
   */

  const hancellService = new HancellService();

  const testValue = v4();
  const updated = await hancellService.upsertSheet({
    fileBase64: exampleFile,
    sheetName: "Sheet1",
    cells: {
      [targetCell]: testValue,
    },
  });

  /**
   * 수정 후 조회
   */
  const after = await hancellService.getHancellData({
    fileBase64: updated.fileBase64,
  });

  const afterData = after["Sheet1"]?.[targetCell];

  typia.assert<false>(beforeData === afterData);
  typia.assert<true>(afterData === testValue);
};
