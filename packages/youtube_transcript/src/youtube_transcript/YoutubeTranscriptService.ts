import { IYoutubeTranscriptService } from "../structures/IYoutubeTranscriptService";
import axios from "axios";

export class YoutubeTranscriptService {
  constructor(private readonly props: IYoutubeTranscriptService.IProps) {}

  /**
   * Youtube Search Service.
   *
   * Extracts YouTube Video Transcripts
   *
   * This function retrieves the text transcript of a YouTube video.
   *
   * It's essential for tasks like video summarization, content analysis, and keyword extraction.
   *
   * By analyzing the transcript, you can identify key points, main topics, and sentiment expressed in the video.
   *
   * Example Use Cases:
   * Product Reviews: Extract product names, pros, cons, and recommendations from air purifier review videos.
   * Tutorials: Create text-based tutorials or step-by-step guides from instructional videos.
   *
   * @summary Get Youtube video transcripts
   * @param input video url
   * @returns transcripts of video
   */
  async transcript(
    input: IYoutubeTranscriptService.ITranscriptYoutubeRequest,
  ): Promise<IYoutubeTranscriptService.ITranscriptYoutubeResponse> {
    try {
      const videoId = this.parsedVideoId(input.url);
      const videoMetaData = await this.getVideoMetaData(videoId);

      if (!videoMetaData) {
        throw new Error("invalid_video_id: videoId: " + videoId);
      }

      const channelName = videoMetaData.channel.name;
      const title = videoMetaData.video.title;
      const uploadedAt = videoMetaData.video.published_time;
      const viewCount = Number(videoMetaData.video.views);

      const defaultAudioLanguage = "ko";
      const transcript = await this.getVideoTranscripts(
        videoId,
        defaultAudioLanguage,
      );

      // Filter out auto-generated captions from available languages
      transcript.available_languages = transcript.available_languages.filter(
        (lang) => !lang.name.includes("auto-generated"),
      );

      // If no available languages after filtering, return no captions
      if (transcript.available_languages.length === 0) {
        return {
          id: videoId,
          title,
          channelName,
          uploadedAt,
          viewCount,
          captionLines: [],
          hasCaption: false,
          hasAutoGeneratedCaption: true,
        };
      }

      if (transcript.transcripts) {
        return {
          id: videoId,
          title,
          channelName,
          uploadedAt,
          viewCount,
          captionLines: transcript.transcripts,
          hasCaption: true,
          hasAutoGeneratedCaption: false,
        };
      }

      const secondTranscript = await this.getVideoTranscripts(
        videoId,
        transcript.available_languages[0]!.lang,
      );

      if (secondTranscript.transcripts) {
        return {
          id: videoId,
          title,
          channelName,
          uploadedAt,
          viewCount,
          captionLines: secondTranscript.transcripts,
          hasCaption: true,
          hasAutoGeneratedCaption: false,
        };
      }

      throw new Error(`Unsupported Youtube Video. videoId: ${videoId}`);
    } catch (err) {
      console.error(JSON.stringify(err));
      throw new Error("Unsupported Youtube Video");
    }
  }

  private parsedVideoId(url: string): string {
    let parsedUrl: URL;
    try {
      parsedUrl = new URL(url);
    } catch (err) {
      throw new Error(`malformed youtube url: ${url}`);
    }

    let videoId: string | null = null;

    if (
      parsedUrl.hostname.endsWith("youtube.com") &&
      parsedUrl.pathname === "/watch"
    ) {
      videoId = parsedUrl.searchParams.get("v");
    } else if (parsedUrl.host.endsWith("youtu.be")) {
      videoId = parsedUrl.pathname.split("/")[1]!;
    }

    if (videoId === null) {
      throw new Error(`malformed youtube url: ${url}`);
    }

    return videoId;
  }

  private async getVideoMetaData(
    videoId: string,
  ): Promise<IYoutubeTranscriptService.IYoutubeVideoMetaData> {
    try {
      const res = await axios.get(`https://www.searchapi.io/api/v1/search`, {
        params: {
          video_id: videoId,
          engine: "youtube_video",
          api_key: this.props.searchApiKey,
          gl: "kr",
          hl: "ko",
        },
      });
      return res.data;
    } catch (err) {
      console.error(JSON.stringify(err));
      throw err;
    }
  }

  private async getVideoTranscripts(
    videoId: string,
    language: string,
  ): Promise<IYoutubeTranscriptService.IYoutubeTranscriptResponse> {
    try {
      const res = await axios.get(
        `https://www.searchapi.io/api/v1/search?engine=youtube_transcripts`,
        {
          params: {
            video_id: videoId,
            lang: language,
            transcript_type: "manual",
            engine: "youtube_transcripts",
            api_key: this.props.searchApiKey,
            gl: "kr",
            hl: "ko",
          },
        },
      );
      return res.data;
    } catch (err) {
      console.error(JSON.stringify(err));
      throw err;
    }
  }
}
